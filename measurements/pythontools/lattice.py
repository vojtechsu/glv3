from utils import GramMatrix, scalar_decomposition, smallest_vector, Cost


def recompute_lattice_matrix(bsc, bso):
    bs = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    for l in range(3):
        for k in range(3):
            for i in range(3):
                bs[l][i] = bs[l][i] + bsc[l][k] * bso[k][i]
    return bs


def update_gram_sizes_bytes(sizes, gm, j):
    for i in range(3):
        sizes[i][gm.p[j]] = (gm.e(i, j).bit_length() + 7) // 8
        sizes[gm.p[j]][i] = sizes[i][gm.p[j]]


def mchange(gm, m, bsc, i, j, sizes, cost=None):
    for l in range(3):
        bsc[gm.p[j]][l] = bsc[gm.p[j]][l] - m * bsc[gm.p[i]][l]
        if cost:
            cost.multiply(m, bsc[gm.p[i]][l])
    gm.apply_m3x3(m, i, j, cost)
    update_gram_sizes_bytes(sizes, gm, j)


def gauss_reduction(gm, bsc, i, j, changes, sizes, cost=None):
    change = 0
    if gm.e(j, j) < gm.e(i, i):
        gm.switch_columns(i, j)
    while True:
        m = gm.compute_m(i, j, sizes, cost)
        if m == 0:
            return change
        mchange(gm, m, bsc, i, j, sizes, cost)
        change = 1
        if changes != None:
            for l in range(3):
                changes[l][gm.p[j]] = 1
                changes[gm.p[j]][l] = 1
        gm.switch_columns(i, j)


def greedy_gauss_prec(bso, pkg, cost=None):
    bsc = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    gm = GramMatrix()
    gm.compute_gram_matrix3x3_precomputed(bso, pkg)
    sizes = gm.compute_gram_sizes_bytes()
    chs = [[1, 1, 1], [1, 0, 0], [1, 0, 0]]
    counter = 0
    while True:
        change = 0
        for i in range(2):
            for j in range(i + 1, 3):
                if chs[gm.p[i]][gm.p[j]] == 0:
                    continue
                if cost:
                    cost.its += 1
                change += gauss_reduction(gm, bsc, i, j, chs, sizes, cost)
                counter += 1
                chs[gm.p[i]][gm.p[j]] = 0
                chs[gm.p[j]][gm.p[i]] = 0
        if change == 0:
            break
    bs = recompute_lattice_matrix(bsc, bso)
    return smallest_vector(bs)


def small_3(pkg, k, N, print_cost=False):
    cost = Cost()
    k0, k1 = scalar_decomposition(k, pkg, N)
    bso = []
    bso.append([k0, k1, -1])
    bso.append([pkg["a1"], pkg["b1"], 0])
    bso.append([pkg["a2"], pkg["b2"], 0])
    result = greedy_gauss_prec(bso, pkg, cost)
    if print_cost:
        cost.print_statistics()

    return result


def init_package(bits):
    pckg = {}
    if bits == 384:
        pckg["a1"] = 5256164817148179441505043377045145550171016348406569208843
        pckg["a2"] = 1694134008685082326610872089003789974893466677546126350621
        pckg["b1"] = -1694134008685082326610872089003789974893466677546126350621
        pckg["b2"] = 6950298825833261768115915466048935525064483025952695559464
        pckg[
            "a12b12"
        ] = 30497358624409741223156815571125077989076213316372143626019915165114833064176841481899331932505674355983834376484290
        pckg[
            "a22b22"
        ] = 51176743807762603801453086000435362115415797002204924796437776688228902542597534709581545794693458529899035387052937
        pckg[
            "a1a2b1b2"
        ] = (
            -2870090039383386600051821371273212494332531777646175086578393910521328751969408543762450668429217503676611427085641
        )
        pckg[
            "lambda"
        ] = 9029383845458153580887594847106592614538015099517773642634444564519521376708800974172569052493327610745929520901058
        pckg[
            "g1x"
        ] = 13350435881144260053110935877525926138455839945158896094870635238271319164533960143452543493890968536432730897075912
        pckg[
            "g1y"
        ] = 2810490595363053396134184311320058541036627779808339698353816426131799190668245878589648502635196218583400013006023
        pckg[
            "g2x"
        ] = 13242228010250538831482496669076134555370992878857295784243463744680427973464379135438385698330134782940128988313150
        pckg[
            "g2y"
        ] = 13227647921482556740271134287547060285218721466279419109582684453018575264580349462815959185057099524219649488042161
        pckg["w"] = 128
    if bits == 256:
        pckg["a1"] = 303414439467246543595250775667605759171
        pckg["a2"] = 64502973549206556628585045361533709077
        pckg["b1"] = -64502973549206556628585045361533709077
        pckg["b2"] = 367917413016453100223835821029139468248
        pckg[
            "a12b12"
        ] = 96220955673913057706504473090856247813623979764298516566772194457260122799170
        pckg[
            "a22b22"
        ] = 139523856397408973829538523188664328269760886368182900531510661554749072381433
        pckg[
            "a1a2b1b2"
        ] = (
            -4160633596689640688901026262144760377709737574331608333072529728972872191929
        )
        pckg[
            "lambda"
        ] = 78074008874160198520644763525212887401909906723592317393988542598630163514318
        pckg[
            "g1x"
        ] = 6636410774506556864774005162061951749450537962799954397758090215581031792446
        pckg[
            "g1y"
        ] = 33193850663848721154507883351096416412681014543344176760472364118972599175560
        pckg[
            "g2x"
        ] = 75928542468193195488721590741574481272714198891253064800438184108329627778720
        pckg[
            "g2y"
        ] = 75192750551909937947468929249355987104463312649195251159923289612823008422826
        pckg["w"] = 85

    if bits == 521:
        pckg[
            "a1"
        ] = 1968663187427730012579589982187102317595963877325717471881175243627143536591213
        pckg[
            "a2"
        ] = 1005158693013058798593648229699477562617190396350355372398933538128018285425617
        pckg[
            "b1"
        ] = (
            -1005158693013058798593648229699477562617190396350355372398933538128018285425617
        )
        pckg[
            "b2"
        ] = 2973821880440788811173238211886579880213154273676072844280108781755161822016830
        pckg[
            "a12b12"
        ] = 4885978743672830207517178292186495130343041411970766960994930560008496219668230466349482739860522324782548894819424454010120948073745162056858861042708642058
        pckg[
            "a22b22"
        ] = 1010343998139720578853253917553690768228065893272174507874171303733272522426075728318850017187440042645068232033047197418191463812507132689206741994839830689
        pckg[
            "a1a2b1b2"
        ] = (
            -1010343998139720578853253917553690768228065893272174507874171303733272522426075728318850017187440042645068232033047197418191463812507132689206741994839830689
        )
        pckg[
            "lambda"
        ] = 4532168091295951778672694677937080126920418569685070937783661161346905075711953714455092417172881526094153458954915617959112058071378687341124729825623803864
        pckg[
            "g1x"
        ] = 6531078016862390245526851865632470985904601559686589827196132264899116154287944462723937106487050613767622183773114886864429626558790394681892471123534895294
        pckg[
            "g1y"
        ] = 5238069597496772969798186276654528136233716042750023995465425195661642480553461093387268172696467835834771716883463234903331027886292073856913791143314363118
        pckg[
            "g2x"
        ] = 789568755642246860219518713224992848582345306081278811894807011291237850880592099294151778271445299245816302876028860361513043002331606587513336878193639958
        pckg[
            "g2y"
        ] = 1409975731973170512344501516116681395851350948205401453097378230801533606943654127887542414359705909350055887182948117203922425497227853615739304648287700707
        pckg["w"] = 174

    return pckg
